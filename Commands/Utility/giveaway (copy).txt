const {
  ChatInputCommandInteraction,
  EmbedBuilder,
  ChannelType
} = require('discord.js')
const ms = require('ms')

module.exports = {
  name: "giveaway",
  description: "giveaway system",
  UserPerms: ["Administrator"], 
  options: [
    {
      name: "start",
      description: "Start a giveaway",
      type: 1,
      options: [
        {
          name: "duration",
          description: "Provide the duration of the giveaway",
          type: 3,
          required: "true"
        },
         {
          name: "winners",
          description: "Provide the number of winners for the giveaway",
          type: 4,
          required: "true"
        },
         {
          name: "prize",
          description: "Provide the prize of the giveaway",
          type: 3,
          required: "true"
        },
         {
          name: "channel",
          description: "Select a channel for the giveaway",
          type: 7,
          ChannelTypes: ChannelType.GUILD_TEXT
        }
      ]
    },
    {
      name: "options",
      description: "action for giveaway",
      type: 3,
      required: "true",
      choices: [
        {
          name: "end",
          value: "end"
        },
        {
          name: "pause",
          value: "pauss"
        },
        {
          name: "unpause",
          value: "unpause"
        },
        {
          name: "reroll",
          value: "reroll"
        },
        {
          name: "delete",
          value: "delete"
        }
      ]
    },
    {
      name: "message-id",
      description: "providemessage id of giveaway",
      type: 3,
      required: "true"
    }
  ],
/*
* param {Client} client
* @param {ChatInputCommandInteraction} interaction 
*/
  async execute(interaction, client) {
    const {options} = interaction
    const Sub = options.getSubCommmand()

    const errEmbed = new EmbedBuilder()
    .setColor("Red")

    const SucEmbed = new EmbedBuilder()  
    .setColor("Green")

    switch(Sub) {
      case "start" : {
        const giveawayChannel = interaction.options.getChannel('channel') || interaction.channel
        const giveawayDuration = interaction.options.getString('duration');
        const giveawayWinnerCount = interaction.options.getInteger('winners');
        const giveawayPrize = interaction.options.getString('prize');
        
       client.giveawaysManager.start(giveawayChannel, {    
            duration: ms(giveawayDuration),
            prize: giveawayPrize,
            winnerCount: giveawayWinnerCount,
            hostedBy: client.config.hostedBy ? interaction.user : null,
            messages: {
              giveaway: "<:giveaway:1036482542230048798>**Giveaway Started**<:giveaway:1036482542230048798>",
              giveawayEnded: "<:giveaway:1036482542230048798>**Giveaway Ended**<:giveaway:1036482542230048798>",
              title: "Nexon Development Giveaways",
              winMessage: "<:giveaway:1036482637222641764>Congratulations, {winners}! You won **{this.prize}**!<:giveaway:1036482637222641764>",
              dropMessage: 
              `
              ${client.emoji.bluearrow} Details
              ${client.emoji.blankspace}${client.emoji.replyc}:gift: Prize: {this.prize}
              ${client.emoji.blankspace}${client.emoji.replyc}:medal: No of winners: winnerCount
              ${client.emoji.blankspace}${client.emoji.replyc}:hourglass: Time left : duration
              `

           }
        }).then(async () => {
         SucEmbed.setDescription("Giveaway successfully started ")
         interaction.reply({embeds: [SucEmbed], ephemeral: true})
        }).catch((err) => {
         ErrEmbed.setDescription("An errorhas occoured\n `${err}\`")
         interaction.reply({embeds: [ErrEmbed], ephemeral: true})
        })
      }
      break;

      case "actions" : {
        const choice = options.getString("options")
        const messageId = options.getString("message-id")
        const giveaway = client.giveawaysManager.giveaways.find((g) => g.guildId === interaction.guildId && g.messageId === messageId);

        if (!giveaway) return interaction.reply(`Unable to find a giveaway for \`${query}\`.`);

        if(!giveaway) {
          errEmbed.setDescription("Unable to find the giveaway with the message id: ${messageId} in this guild");
        return interaction.editReply({embeds: [errEmbed], ephemeral: true})
        }

        switch(choice) {
          case "end" : {
        client.giveawaysManager.end(messageId).then(() => {
          sucEmbed.setDescription("giveaway has been ended")
          return interaction.editReply({embeds: [susEmbed], ephemeral: true})
        }).catch((err) => {
          errEmbed.setDescription(`An error has occurred, please check and try again.\n\`${err}\``)
          return interaction.editReply({embeds: [errEmbed], ephemeral: true})
        });
          }
          break;
          case "pause" : {
            client.giveawaysManager.pause(messageId).then(() => {
          sucEmbed.setDescription("giveaway has been paused")
          return interaction.editReply({embeds: [susEmbed], ephemeral: true})
        }).catch((err) => {
          errEmbed.setDescription(`An error has occurred, please check and try again.\n\`${err}\``)
          return interaction.editReply({embeds: [errEmbed], ephemeral: true})
        });
          }
          break;
          case "unpause" : {
          client.giveawaysManager.unpause(messageId).then(() => {
          sucEmbed.setDescription("giveaway has been unpaused")
          return interaction.editReply({embeds: [susEmbed], ephemeral: true})
        }).catch((err) => {
          errEmbed.setDescription(`An error has occurred, please check and try again.\n\`${err}\``)
          return interaction.editReply({embeds: [errEmbed], ephemeral: true})
        });
          }
          break;
          case "reroll" : {
           client.giveawaysManager.reroll(messageId).then(() => {
          sucEmbed.setDescription("giveaway has been rerolled")
          return interaction.editReply({embeds: [susEmbed], ephemeral: true})
        }).catch((err) => {
          errEmbed.setDescription(`An error has occurred, please check and try again.\n\`${err}\``)
          return interaction.editReply({embeds: [errEmbed], ephemeral: true})
        });
          }
          break;
          case "delete" : {
          client.giveawaysManager.delete(messageId).then(() => {
          sucEmbed.setDescription("giveaway has been deleted")
          return interaction.editReply({embeds: [susEmbed], ephemeral: true})
        }).catch((err) => {
          errEmbed.setDescription(`An error has occurred, please check and try again.\n\`${err}\``)
          return interaction.editReply({embeds: [errEmbed], ephemeral: true})
        });
          }
          break;
        }
      }
      break;

      default : {
        console.log("Error in giveaway command")
      }
    }
  }
}